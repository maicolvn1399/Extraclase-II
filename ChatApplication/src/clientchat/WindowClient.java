/**
 * 
 * GUI for the users who send the messages
 */
package clientchat;

import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;



/**
 *Class that manages the GUI of clients 
 * @author Michael
 */
public class WindowClient extends javax.swing.JFrame {

    /**
     * Creates new form WindowClient
     */
    public WindowClient() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        String IP_port_name[] = getIP_port_name();
        String ip = IP_port_name[0];
        String port = IP_port_name[1];
        String name = IP_port_name[2];
        client = new Client(this,ip,Integer.valueOf(port),name);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        convers_txt = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        cmb_contacts = new javax.swing.JComboBox<>();
        msg_textfield = new javax.swing.JTextField();
        btn_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        convers_txt.setColumns(20);
        convers_txt.setRows(5);
        jScrollPane1.setViewportView(convers_txt);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Message to: ");

        cmb_contacts.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cmb_contacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_contactsActionPerformed(evt);
            }
        });

        btn_send.setText("Send");
        btn_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addComponent(cmb_contacts, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(msg_textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_send, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(26, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmb_contacts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(msg_textfield)
                    .addComponent(btn_send, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_contactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_contactsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_contactsActionPerformed

    private void btn_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sendActionPerformed
        // TODO add your handling code here:
        //if there is no more clients on the chat 
        if(cmb_contacts.getSelectedItem()==null){
            JOptionPane.showMessageDialog(this, "You have to select a valid user, if there's no valid user \n"
                    + "wait until someone else connects to the app");
            return;
            
        }//End if 
        String receiving_client = cmb_contacts.getSelectedItem().toString();
        String message = msg_textfield.getText();
        client.sendMessage(receiving_client, message);
        //Adds the message to the text area to see the whole conversation 
        convers_txt.append("## Me -> "+receiving_client + " ## : \n"+message+"\n");
        msg_textfield.setText("");
        
    }//GEN-LAST:event_btn_sendActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        client.confirmDisconnection();
    }//GEN-LAST:event_formWindowClosed

   
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WindowClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WindowClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WindowClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WindowClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WindowClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_send;
    private javax.swing.JComboBox<String> cmb_contacts;
    private javax.swing.JTextArea convers_txt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField msg_textfield;
    // End of variables declaration//GEN-END:variables

    /**
    *Constant to store the default port number 
    */
    private final String DEFAULT_PORT = "10101";
    
    /**
    *Constsnt to store the default IP address 
    */
    private final String DEFAULT_IP = "127.0.0.1";
    
    /**
    *Constant to store the client
    */
    private final Client client;
    
    
    /**
    *Adds contacts to the combobox
    *@param contact
    */
    void addContact(String contact){
        cmb_contacts.addItem(contact);
    }//End addContact()
    
    /**
     * Adds new message to the history of the conversation
     * @param sender 
     * @param message
     */
    void addMessage(String sender, String message){
        convers_txt.append("##### "+sender + " ##### : \n"+message+"\n");
    }//End addMessage()
    
    /**
     * Sets the title of the window according to the name of the client 
     */
    void initializedSession(String ID){
        this.setTitle("-------- "+ID+" --------");
    }//End initializedSession
    
    /***
     * Method that opens new window so the user can enter the IP of the host
     * the port, and the name which will be used in the conversations 
     * @return
     */
    private String[] getIP_port_name(){
        String s[] = new String[3];
        s[0] = DEFAULT_IP;
        s[1] = DEFAULT_PORT;
        JTextField ip = new JTextField(20);
        JTextField port = new JTextField(20);
        JTextField user = new JTextField(20);
        ip.setText(DEFAULT_IP);
        port.setText(DEFAULT_PORT);
        user.setText("User");
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3,2));
        panel.add(new JLabel("Server's IP: "));
        panel.add(ip);
        panel.add(new JLabel("Connection port"));
        panel.add(port);
        panel.add(new JLabel("Enter your name"));
        panel.add(user);
        int result = JOptionPane.showConfirmDialog(null, panel,"Communication settings",JOptionPane.OK_CANCEL_OPTION);
        
        if(result == JOptionPane.OK_OPTION){
            s[0] = ip.getText();
            s[1] = port.getText();
            s[2] = user.getText();
            
        }else{
            System.exit(0);
        }//End else 
        
        return s;
        
    }//End getIP_port_name()
    
    
    /***
     * Method that deletes some client of the list of contacts, 
     * this is run for when an user logs off 
     * @param ID
     */
    void deleteContact(String ID){
        for(int i = 0; i < cmb_contacts.getItemCount();i++){
            if(cmb_contacts.getItemAt(i).toString().equals(ID)){
                cmb_contacts.removeItemAt(i);
                return;
            }//End if
        }//End for 
    }//End deleteContact()

}//End class WindowClient


